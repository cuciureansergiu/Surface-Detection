-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gradient is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_f_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_f_EN_A : OUT STD_LOGIC;
    input_f_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_f_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_f_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    input_f_Clk_A : OUT STD_LOGIC;
    input_f_Rst_A : OUT STD_LOGIC;
    kernel_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_EN_A : OUT STD_LOGIC;
    kernel_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    kernel_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_Clk_A : OUT STD_LOGIC;
    kernel_Rst_A : OUT STD_LOGIC;
    output_f_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_f_EN_A : OUT STD_LOGIC;
    output_f_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_f_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_f_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    output_f_Clk_A : OUT STD_LOGIC;
    output_f_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gradient is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gradient,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=20481,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=223,HLS_SYN_LUT=307,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal status : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_fu_124_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal idx_reg_326 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln23_fu_130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_331 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln20_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_fu_136_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln23_1_fu_140_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_1_reg_351 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_356 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_6_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln23_7_reg_371 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_376 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln23_2_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_3_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_3_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal or_ln23_1_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln23_1_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_0_reg_107 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_f_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal output_f_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_3_fu_214_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln23_2_fu_204_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_fu_226_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_fu_226_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln_fu_232_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln23_1_fu_246_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_260_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_226_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_2_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln23_2_fu_277_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln23_1_fu_308_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_285_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln23_fu_280_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp1_fu_294_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_269_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_1_fu_308_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_1_fu_308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_2_fu_315_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln23_2_fu_315_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln23_1_fu_308_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln23_1_fu_308_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln23_2_fu_315_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_2_fu_315_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_3_fu_214_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln23_fu_226_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_226_p10 : STD_LOGIC_VECTOR (15 downto 0);

    component gradient_mul_mul_8ns_16ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component gradient_mul_mul_8ns_24ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gradient_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        status : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    gradient_CRTL_BUS_s_axi_U : component gradient_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        status => status);

    gradient_mul_mul_8ns_16ns_24_1_1_U1 : component gradient_mul_mul_8ns_16ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln23_1_fu_308_p0,
        din1 => mul_ln23_1_fu_308_p1,
        dout => mul_ln23_1_fu_308_p2);

    gradient_mul_mul_8ns_24ns_32_1_1_U2 : component gradient_mul_mul_8ns_24ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 24,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln23_2_fu_315_p0,
        din1 => mul_ln23_2_fu_315_p1,
        dout => mul_ln23_2_fu_315_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    idx_0_reg_107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                idx_0_reg_107 <= idx_reg_326;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_0_reg_107 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                idx_reg_326 <= idx_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                lshr_ln23_2_reg_381 <= kernel_Dout_A(31 downto 24);
                tmp_3_reg_356 <= input_f_Dout_A(15 downto 8);
                tmp_4_reg_366 <= input_f_Dout_A(23 downto 16);
                tmp_5_reg_376 <= input_f_Dout_A(31 downto 24);
                trunc_ln23_1_reg_351 <= trunc_ln23_1_fu_140_p1;
                trunc_ln23_6_reg_361 <= kernel_Dout_A(15 downto 8);
                trunc_ln23_7_reg_371 <= kernel_Dout_A(23 downto 16);
                trunc_ln23_reg_346 <= trunc_ln23_fu_136_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    mul_ln23_3_reg_386(31 downto 24) <= mul_ln23_3_fu_214_p2(31 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                or_ln23_1_reg_391 <= or_ln23_1_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_118_p2 = ap_const_lv1_0))) then
                    zext_ln23_reg_331(12 downto 0) <= zext_ln23_fu_130_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln23_reg_331(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    mul_ln23_3_reg_386(23 downto 0) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln20_fu_118_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_118_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln23_1_fu_246_p3 <= (tmp_4_reg_366 & ap_const_lv16_0);
    and_ln23_2_fu_204_p3 <= (tmp_5_reg_376 & ap_const_lv24_0);
    and_ln_fu_232_p3 <= (tmp_3_reg_356 & ap_const_lv8_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_118_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_118_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln20_fu_118_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln20_fu_118_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln20_fu_118_p2 <= "1" when (idx_0_reg_107 = ap_const_lv13_1000) else "0";
    idx_fu_124_p2 <= std_logic_vector(unsigned(idx_0_reg_107) + unsigned(ap_const_lv13_1));
    input_f_Addr_A <= std_logic_vector(shift_left(unsigned(input_f_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    input_f_Addr_A_orig <= zext_ln23_fu_130_p1(32 - 1 downto 0);
    input_f_Clk_A <= ap_clk;
    input_f_Din_A <= ap_const_lv32_0;

    input_f_EN_A_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_f_EN_A <= ap_const_logic_1;
        else 
            input_f_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    input_f_Rst_A <= ap_rst_n_inv;
    input_f_WEN_A <= ap_const_lv4_0;
    kernel_Addr_A <= std_logic_vector(shift_left(unsigned(kernel_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    kernel_Addr_A_orig <= zext_ln23_fu_130_p1(32 - 1 downto 0);
    kernel_Clk_A <= ap_clk;
    kernel_Din_A <= ap_const_lv32_0;

    kernel_EN_A_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_EN_A <= ap_const_logic_1;
        else 
            kernel_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    kernel_Rst_A <= ap_rst_n_inv;
    kernel_WEN_A <= ap_const_lv4_0;
    mul_ln23_1_fu_308_p0 <= mul_ln23_1_fu_308_p00(8 - 1 downto 0);
    mul_ln23_1_fu_308_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_6_reg_361),24));
    mul_ln23_1_fu_308_p1 <= mul_ln23_1_fu_308_p10(16 - 1 downto 0);
    mul_ln23_1_fu_308_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_232_p3),24));
    mul_ln23_2_fu_315_p0 <= mul_ln23_2_fu_315_p00(8 - 1 downto 0);
    mul_ln23_2_fu_315_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_7_reg_371),32));
    mul_ln23_2_fu_315_p1 <= mul_ln23_2_fu_315_p10(24 - 1 downto 0);
    mul_ln23_2_fu_315_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln23_1_fu_246_p3),32));
    mul_ln23_3_fu_214_p0 <= mul_ln23_3_fu_214_p00(8 - 1 downto 0);
    mul_ln23_3_fu_214_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln23_2_reg_381),32));
    mul_ln23_3_fu_214_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln23_3_fu_214_p0) * signed(and_ln23_2_fu_204_p3))), 32));
    mul_ln23_fu_226_p0 <= mul_ln23_fu_226_p00(8 - 1 downto 0);
    mul_ln23_fu_226_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_1_reg_351),16));
    mul_ln23_fu_226_p1 <= mul_ln23_fu_226_p10(8 - 1 downto 0);
    mul_ln23_fu_226_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln23_reg_346),16));
    mul_ln23_fu_226_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln23_fu_226_p0) * unsigned(mul_ln23_fu_226_p1), 16));
    or_ln23_1_fu_302_p2 <= (tmp_fu_269_p3 or tmp1_fu_294_p3);
    or_ln23_fu_280_p2 <= (trunc_ln23_2_fu_277_p1 or mul_ln23_1_fu_308_p2);
    output_f_Addr_A <= std_logic_vector(shift_left(unsigned(output_f_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    output_f_Addr_A_orig <= zext_ln23_reg_331(32 - 1 downto 0);
    output_f_Clk_A <= ap_clk;
    output_f_Din_A <= or_ln23_1_reg_391;

    output_f_EN_A_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_f_EN_A <= ap_const_logic_1;
        else 
            output_f_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    output_f_Rst_A <= ap_rst_n_inv;

    output_f_WEN_A_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_f_WEN_A <= ap_const_lv4_F;
        else 
            output_f_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    tmp1_fu_294_p3 <= (tmp_2_fu_285_p4 & or_ln23_fu_280_p2);
    tmp_1_fu_260_p4 <= mul_ln23_3_reg_386(31 downto 16);
    tmp_2_fu_285_p4 <= mul_ln23_2_fu_315_p2(31 downto 24);
    tmp_fu_269_p3 <= (tmp_1_fu_260_p4 & mul_ln23_fu_226_p2);
    trunc_ln23_1_fu_140_p1 <= kernel_Dout_A(8 - 1 downto 0);
    trunc_ln23_2_fu_277_p1 <= mul_ln23_2_fu_315_p2(24 - 1 downto 0);
    trunc_ln23_fu_136_p1 <= input_f_Dout_A(8 - 1 downto 0);
    zext_ln23_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_0_reg_107),64));
end behav;
