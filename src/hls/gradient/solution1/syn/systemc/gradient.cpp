// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "gradient.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic gradient::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic gradient::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> gradient::ap_ST_fsm_state1 = "1";
const sc_lv<6> gradient::ap_ST_fsm_state2 = "10";
const sc_lv<6> gradient::ap_ST_fsm_state3 = "100";
const sc_lv<6> gradient::ap_ST_fsm_state4 = "1000";
const sc_lv<6> gradient::ap_ST_fsm_state5 = "10000";
const sc_lv<6> gradient::ap_ST_fsm_state6 = "100000";
const sc_lv<32> gradient::ap_const_lv32_0 = "00000000000000000000000000000000";
const int gradient::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> gradient::ap_const_lv32_1 = "1";
const sc_lv<1> gradient::ap_const_lv1_0 = "0";
const sc_lv<32> gradient::ap_const_lv32_2 = "10";
const sc_lv<32> gradient::ap_const_lv32_3 = "11";
const sc_lv<32> gradient::ap_const_lv32_4 = "100";
const sc_lv<13> gradient::ap_const_lv13_0 = "0000000000000";
const sc_lv<32> gradient::ap_const_lv32_5 = "101";
const sc_lv<4> gradient::ap_const_lv4_0 = "0000";
const sc_lv<4> gradient::ap_const_lv4_F = "1111";
const sc_lv<13> gradient::ap_const_lv13_1000 = "1000000000000";
const sc_lv<13> gradient::ap_const_lv13_1 = "1";
const sc_lv<32> gradient::ap_const_lv32_8 = "1000";
const sc_lv<32> gradient::ap_const_lv32_F = "1111";
const sc_lv<32> gradient::ap_const_lv32_10 = "10000";
const sc_lv<32> gradient::ap_const_lv32_17 = "10111";
const sc_lv<32> gradient::ap_const_lv32_18 = "11000";
const sc_lv<32> gradient::ap_const_lv32_1F = "11111";
const sc_lv<24> gradient::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<8> gradient::ap_const_lv8_0 = "00000000";
const sc_lv<16> gradient::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> gradient::ap_const_lv1_1 = "1";
const bool gradient::ap_const_boolean_1 = true;

gradient::gradient(sc_module_name name) : sc_module(name), mVcdFile(0) {
    gradient_CRTL_BUS_s_axi_U = new gradient_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("gradient_CRTL_BUS_s_axi_U");
    gradient_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    gradient_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    gradient_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    gradient_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    gradient_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    gradient_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    gradient_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    gradient_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    gradient_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    gradient_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    gradient_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    gradient_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    gradient_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    gradient_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    gradient_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    gradient_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    gradient_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    gradient_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    gradient_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    gradient_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    gradient_CRTL_BUS_s_axi_U->ap_start(ap_start);
    gradient_CRTL_BUS_s_axi_U->interrupt(interrupt);
    gradient_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    gradient_CRTL_BUS_s_axi_U->ap_done(ap_done);
    gradient_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    gradient_CRTL_BUS_s_axi_U->status(status);
    gradient_mul_mul_8ns_16ns_24_1_1_U1 = new gradient_mul_mul_8ns_16ns_24_1_1<1,1,8,16,24>("gradient_mul_mul_8ns_16ns_24_1_1_U1");
    gradient_mul_mul_8ns_16ns_24_1_1_U1->din0(mul_ln23_1_fu_308_p0);
    gradient_mul_mul_8ns_16ns_24_1_1_U1->din1(mul_ln23_1_fu_308_p1);
    gradient_mul_mul_8ns_16ns_24_1_1_U1->dout(mul_ln23_1_fu_308_p2);
    gradient_mul_mul_8ns_24ns_32_1_1_U2 = new gradient_mul_mul_8ns_24ns_32_1_1<1,1,8,24,32>("gradient_mul_mul_8ns_24ns_32_1_1_U2");
    gradient_mul_mul_8ns_24ns_32_1_1_U2->din0(mul_ln23_2_fu_315_p0);
    gradient_mul_mul_8ns_24ns_32_1_1_U2->din1(mul_ln23_2_fu_315_p1);
    gradient_mul_mul_8ns_24ns_32_1_1_U2->dout(mul_ln23_2_fu_315_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln23_1_fu_246_p3);
    sensitive << ( tmp_4_reg_366 );

    SC_METHOD(thread_and_ln23_2_fu_204_p3);
    sensitive << ( tmp_5_reg_376 );

    SC_METHOD(thread_and_ln_fu_232_p3);
    sensitive << ( tmp_3_reg_356 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_118_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_118_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln20_fu_118_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( idx_0_reg_107 );

    SC_METHOD(thread_idx_fu_124_p2);
    sensitive << ( idx_0_reg_107 );

    SC_METHOD(thread_input_f_Addr_A);
    sensitive << ( input_f_Addr_A_orig );

    SC_METHOD(thread_input_f_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln23_fu_130_p1 );

    SC_METHOD(thread_input_f_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_input_f_Din_A);

    SC_METHOD(thread_input_f_EN_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_input_f_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_input_f_WEN_A);

    SC_METHOD(thread_kernel_Addr_A);
    sensitive << ( kernel_Addr_A_orig );

    SC_METHOD(thread_kernel_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln23_fu_130_p1 );

    SC_METHOD(thread_kernel_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_kernel_Din_A);

    SC_METHOD(thread_kernel_EN_A);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_kernel_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_kernel_WEN_A);

    SC_METHOD(thread_mul_ln23_1_fu_308_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_1_fu_308_p00 );

    SC_METHOD(thread_mul_ln23_1_fu_308_p00);
    sensitive << ( trunc_ln23_6_reg_361 );

    SC_METHOD(thread_mul_ln23_1_fu_308_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_1_fu_308_p10 );

    SC_METHOD(thread_mul_ln23_1_fu_308_p10);
    sensitive << ( and_ln_fu_232_p3 );

    SC_METHOD(thread_mul_ln23_2_fu_315_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_2_fu_315_p00 );

    SC_METHOD(thread_mul_ln23_2_fu_315_p00);
    sensitive << ( trunc_ln23_7_reg_371 );

    SC_METHOD(thread_mul_ln23_2_fu_315_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_2_fu_315_p10 );

    SC_METHOD(thread_mul_ln23_2_fu_315_p10);
    sensitive << ( and_ln23_1_fu_246_p3 );

    SC_METHOD(thread_mul_ln23_3_fu_214_p0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( mul_ln23_3_fu_214_p00 );

    SC_METHOD(thread_mul_ln23_3_fu_214_p00);
    sensitive << ( lshr_ln23_2_reg_381 );

    SC_METHOD(thread_mul_ln23_3_fu_214_p2);
    sensitive << ( mul_ln23_3_fu_214_p0 );
    sensitive << ( and_ln23_2_fu_204_p3 );

    SC_METHOD(thread_mul_ln23_fu_226_p0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_fu_226_p00 );

    SC_METHOD(thread_mul_ln23_fu_226_p00);
    sensitive << ( trunc_ln23_1_reg_351 );

    SC_METHOD(thread_mul_ln23_fu_226_p1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( mul_ln23_fu_226_p10 );

    SC_METHOD(thread_mul_ln23_fu_226_p10);
    sensitive << ( trunc_ln23_reg_346 );

    SC_METHOD(thread_mul_ln23_fu_226_p2);
    sensitive << ( mul_ln23_fu_226_p0 );
    sensitive << ( mul_ln23_fu_226_p1 );

    SC_METHOD(thread_or_ln23_1_fu_302_p2);
    sensitive << ( tmp1_fu_294_p3 );
    sensitive << ( tmp_fu_269_p3 );

    SC_METHOD(thread_or_ln23_fu_280_p2);
    sensitive << ( trunc_ln23_2_fu_277_p1 );
    sensitive << ( mul_ln23_1_fu_308_p2 );

    SC_METHOD(thread_output_f_Addr_A);
    sensitive << ( output_f_Addr_A_orig );

    SC_METHOD(thread_output_f_Addr_A_orig);
    sensitive << ( zext_ln23_reg_331 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_f_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_output_f_Din_A);
    sensitive << ( or_ln23_1_reg_391 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_f_EN_A);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_output_f_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_output_f_WEN_A);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp1_fu_294_p3);
    sensitive << ( tmp_2_fu_285_p4 );
    sensitive << ( or_ln23_fu_280_p2 );

    SC_METHOD(thread_tmp_1_fu_260_p4);
    sensitive << ( mul_ln23_3_reg_386 );

    SC_METHOD(thread_tmp_2_fu_285_p4);
    sensitive << ( mul_ln23_2_fu_315_p2 );

    SC_METHOD(thread_tmp_fu_269_p3);
    sensitive << ( tmp_1_fu_260_p4 );
    sensitive << ( mul_ln23_fu_226_p2 );

    SC_METHOD(thread_trunc_ln23_1_fu_140_p1);
    sensitive << ( kernel_Dout_A );

    SC_METHOD(thread_trunc_ln23_2_fu_277_p1);
    sensitive << ( mul_ln23_2_fu_315_p2 );

    SC_METHOD(thread_trunc_ln23_fu_136_p1);
    sensitive << ( input_f_Dout_A );

    SC_METHOD(thread_zext_ln23_fu_130_p1);
    sensitive << ( idx_0_reg_107 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_118_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "gradient_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_f_Addr_A, "(port)input_f_Addr_A");
    sc_trace(mVcdFile, input_f_EN_A, "(port)input_f_EN_A");
    sc_trace(mVcdFile, input_f_WEN_A, "(port)input_f_WEN_A");
    sc_trace(mVcdFile, input_f_Din_A, "(port)input_f_Din_A");
    sc_trace(mVcdFile, input_f_Dout_A, "(port)input_f_Dout_A");
    sc_trace(mVcdFile, input_f_Clk_A, "(port)input_f_Clk_A");
    sc_trace(mVcdFile, input_f_Rst_A, "(port)input_f_Rst_A");
    sc_trace(mVcdFile, kernel_Addr_A, "(port)kernel_Addr_A");
    sc_trace(mVcdFile, kernel_EN_A, "(port)kernel_EN_A");
    sc_trace(mVcdFile, kernel_WEN_A, "(port)kernel_WEN_A");
    sc_trace(mVcdFile, kernel_Din_A, "(port)kernel_Din_A");
    sc_trace(mVcdFile, kernel_Dout_A, "(port)kernel_Dout_A");
    sc_trace(mVcdFile, kernel_Clk_A, "(port)kernel_Clk_A");
    sc_trace(mVcdFile, kernel_Rst_A, "(port)kernel_Rst_A");
    sc_trace(mVcdFile, output_f_Addr_A, "(port)output_f_Addr_A");
    sc_trace(mVcdFile, output_f_EN_A, "(port)output_f_EN_A");
    sc_trace(mVcdFile, output_f_WEN_A, "(port)output_f_WEN_A");
    sc_trace(mVcdFile, output_f_Din_A, "(port)output_f_Din_A");
    sc_trace(mVcdFile, output_f_Dout_A, "(port)output_f_Dout_A");
    sc_trace(mVcdFile, output_f_Clk_A, "(port)output_f_Clk_A");
    sc_trace(mVcdFile, output_f_Rst_A, "(port)output_f_Rst_A");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, status, "status");
    sc_trace(mVcdFile, idx_fu_124_p2, "idx_fu_124_p2");
    sc_trace(mVcdFile, idx_reg_326, "idx_reg_326");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln23_fu_130_p1, "zext_ln23_fu_130_p1");
    sc_trace(mVcdFile, zext_ln23_reg_331, "zext_ln23_reg_331");
    sc_trace(mVcdFile, icmp_ln20_fu_118_p2, "icmp_ln20_fu_118_p2");
    sc_trace(mVcdFile, trunc_ln23_fu_136_p1, "trunc_ln23_fu_136_p1");
    sc_trace(mVcdFile, trunc_ln23_reg_346, "trunc_ln23_reg_346");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, trunc_ln23_1_fu_140_p1, "trunc_ln23_1_fu_140_p1");
    sc_trace(mVcdFile, trunc_ln23_1_reg_351, "trunc_ln23_1_reg_351");
    sc_trace(mVcdFile, tmp_3_reg_356, "tmp_3_reg_356");
    sc_trace(mVcdFile, trunc_ln23_6_reg_361, "trunc_ln23_6_reg_361");
    sc_trace(mVcdFile, tmp_4_reg_366, "tmp_4_reg_366");
    sc_trace(mVcdFile, trunc_ln23_7_reg_371, "trunc_ln23_7_reg_371");
    sc_trace(mVcdFile, tmp_5_reg_376, "tmp_5_reg_376");
    sc_trace(mVcdFile, lshr_ln23_2_reg_381, "lshr_ln23_2_reg_381");
    sc_trace(mVcdFile, mul_ln23_3_fu_214_p2, "mul_ln23_3_fu_214_p2");
    sc_trace(mVcdFile, mul_ln23_3_reg_386, "mul_ln23_3_reg_386");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, or_ln23_1_fu_302_p2, "or_ln23_1_fu_302_p2");
    sc_trace(mVcdFile, or_ln23_1_reg_391, "or_ln23_1_reg_391");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, idx_0_reg_107, "idx_0_reg_107");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, input_f_Addr_A_orig, "input_f_Addr_A_orig");
    sc_trace(mVcdFile, kernel_Addr_A_orig, "kernel_Addr_A_orig");
    sc_trace(mVcdFile, output_f_Addr_A_orig, "output_f_Addr_A_orig");
    sc_trace(mVcdFile, mul_ln23_3_fu_214_p0, "mul_ln23_3_fu_214_p0");
    sc_trace(mVcdFile, and_ln23_2_fu_204_p3, "and_ln23_2_fu_204_p3");
    sc_trace(mVcdFile, mul_ln23_fu_226_p0, "mul_ln23_fu_226_p0");
    sc_trace(mVcdFile, mul_ln23_fu_226_p1, "mul_ln23_fu_226_p1");
    sc_trace(mVcdFile, and_ln_fu_232_p3, "and_ln_fu_232_p3");
    sc_trace(mVcdFile, and_ln23_1_fu_246_p3, "and_ln23_1_fu_246_p3");
    sc_trace(mVcdFile, tmp_1_fu_260_p4, "tmp_1_fu_260_p4");
    sc_trace(mVcdFile, mul_ln23_fu_226_p2, "mul_ln23_fu_226_p2");
    sc_trace(mVcdFile, mul_ln23_2_fu_315_p2, "mul_ln23_2_fu_315_p2");
    sc_trace(mVcdFile, trunc_ln23_2_fu_277_p1, "trunc_ln23_2_fu_277_p1");
    sc_trace(mVcdFile, mul_ln23_1_fu_308_p2, "mul_ln23_1_fu_308_p2");
    sc_trace(mVcdFile, tmp_2_fu_285_p4, "tmp_2_fu_285_p4");
    sc_trace(mVcdFile, or_ln23_fu_280_p2, "or_ln23_fu_280_p2");
    sc_trace(mVcdFile, tmp1_fu_294_p3, "tmp1_fu_294_p3");
    sc_trace(mVcdFile, tmp_fu_269_p3, "tmp_fu_269_p3");
    sc_trace(mVcdFile, mul_ln23_1_fu_308_p0, "mul_ln23_1_fu_308_p0");
    sc_trace(mVcdFile, mul_ln23_1_fu_308_p1, "mul_ln23_1_fu_308_p1");
    sc_trace(mVcdFile, mul_ln23_2_fu_315_p0, "mul_ln23_2_fu_315_p0");
    sc_trace(mVcdFile, mul_ln23_2_fu_315_p1, "mul_ln23_2_fu_315_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, mul_ln23_1_fu_308_p00, "mul_ln23_1_fu_308_p00");
    sc_trace(mVcdFile, mul_ln23_1_fu_308_p10, "mul_ln23_1_fu_308_p10");
    sc_trace(mVcdFile, mul_ln23_2_fu_315_p00, "mul_ln23_2_fu_315_p00");
    sc_trace(mVcdFile, mul_ln23_2_fu_315_p10, "mul_ln23_2_fu_315_p10");
    sc_trace(mVcdFile, mul_ln23_3_fu_214_p00, "mul_ln23_3_fu_214_p00");
    sc_trace(mVcdFile, mul_ln23_fu_226_p00, "mul_ln23_fu_226_p00");
    sc_trace(mVcdFile, mul_ln23_fu_226_p10, "mul_ln23_fu_226_p10");
#endif

    }
    mHdltvinHandle.open("gradient.hdltvin.dat");
    mHdltvoutHandle.open("gradient.hdltvout.dat");
}

gradient::~gradient() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete gradient_CRTL_BUS_s_axi_U;
    delete gradient_mul_mul_8ns_16ns_24_1_1_U1;
    delete gradient_mul_mul_8ns_24ns_32_1_1_U2;
}

void gradient::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void gradient::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        idx_0_reg_107 = idx_reg_326.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        idx_0_reg_107 = ap_const_lv13_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        idx_reg_326 = idx_fu_124_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        lshr_ln23_2_reg_381 = kernel_Dout_A.read().range(31, 24);
        tmp_3_reg_356 = input_f_Dout_A.read().range(15, 8);
        tmp_4_reg_366 = input_f_Dout_A.read().range(23, 16);
        tmp_5_reg_376 = input_f_Dout_A.read().range(31, 24);
        trunc_ln23_1_reg_351 = trunc_ln23_1_fu_140_p1.read();
        trunc_ln23_6_reg_361 = kernel_Dout_A.read().range(15, 8);
        trunc_ln23_7_reg_371 = kernel_Dout_A.read().range(23, 16);
        trunc_ln23_reg_346 = trunc_ln23_fu_136_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        mul_ln23_3_reg_386 = mul_ln23_3_fu_214_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        or_ln23_1_reg_391 = or_ln23_1_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_118_p2.read(), ap_const_lv1_0))) {
        zext_ln23_reg_331 = zext_ln23_fu_130_p1.read();
    }
}

void gradient::thread_and_ln23_1_fu_246_p3() {
    and_ln23_1_fu_246_p3 = esl_concat<8,16>(tmp_4_reg_366.read(), ap_const_lv16_0);
}

void gradient::thread_and_ln23_2_fu_204_p3() {
    and_ln23_2_fu_204_p3 = esl_concat<8,24>(tmp_5_reg_376.read(), ap_const_lv24_0);
}

void gradient::thread_and_ln_fu_232_p3() {
    and_ln_fu_232_p3 = esl_concat<8,8>(tmp_3_reg_356.read(), ap_const_lv8_0);
}

void gradient::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void gradient::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void gradient::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void gradient::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void gradient::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void gradient::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void gradient::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_118_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void gradient::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void gradient::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_118_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void gradient::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void gradient::thread_icmp_ln20_fu_118_p2() {
    icmp_ln20_fu_118_p2 = (!idx_0_reg_107.read().is_01() || !ap_const_lv13_1000.is_01())? sc_lv<1>(): sc_lv<1>(idx_0_reg_107.read() == ap_const_lv13_1000);
}

void gradient::thread_idx_fu_124_p2() {
    idx_fu_124_p2 = (!idx_0_reg_107.read().is_01() || !ap_const_lv13_1.is_01())? sc_lv<13>(): (sc_biguint<13>(idx_0_reg_107.read()) + sc_biguint<13>(ap_const_lv13_1));
}

void gradient::thread_input_f_Addr_A() {
    input_f_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): input_f_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void gradient::thread_input_f_Addr_A_orig() {
    input_f_Addr_A_orig =  (sc_lv<32>) (zext_ln23_fu_130_p1.read());
}

void gradient::thread_input_f_Clk_A() {
    input_f_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void gradient::thread_input_f_Din_A() {
    input_f_Din_A = ap_const_lv32_0;
}

void gradient::thread_input_f_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        input_f_EN_A = ap_const_logic_1;
    } else {
        input_f_EN_A = ap_const_logic_0;
    }
}

void gradient::thread_input_f_Rst_A() {
    input_f_Rst_A = ap_rst_n_inv.read();
}

void gradient::thread_input_f_WEN_A() {
    input_f_WEN_A = ap_const_lv4_0;
}

void gradient::thread_kernel_Addr_A() {
    kernel_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): kernel_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void gradient::thread_kernel_Addr_A_orig() {
    kernel_Addr_A_orig =  (sc_lv<32>) (zext_ln23_fu_130_p1.read());
}

void gradient::thread_kernel_Clk_A() {
    kernel_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void gradient::thread_kernel_Din_A() {
    kernel_Din_A = ap_const_lv32_0;
}

void gradient::thread_kernel_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        kernel_EN_A = ap_const_logic_1;
    } else {
        kernel_EN_A = ap_const_logic_0;
    }
}

void gradient::thread_kernel_Rst_A() {
    kernel_Rst_A = ap_rst_n_inv.read();
}

void gradient::thread_kernel_WEN_A() {
    kernel_WEN_A = ap_const_lv4_0;
}

void gradient::thread_mul_ln23_1_fu_308_p0() {
    mul_ln23_1_fu_308_p0 =  (sc_lv<8>) (mul_ln23_1_fu_308_p00.read());
}

void gradient::thread_mul_ln23_1_fu_308_p00() {
    mul_ln23_1_fu_308_p00 = esl_zext<24,8>(trunc_ln23_6_reg_361.read());
}

void gradient::thread_mul_ln23_1_fu_308_p1() {
    mul_ln23_1_fu_308_p1 =  (sc_lv<16>) (mul_ln23_1_fu_308_p10.read());
}

void gradient::thread_mul_ln23_1_fu_308_p10() {
    mul_ln23_1_fu_308_p10 = esl_zext<24,16>(and_ln_fu_232_p3.read());
}

void gradient::thread_mul_ln23_2_fu_315_p0() {
    mul_ln23_2_fu_315_p0 =  (sc_lv<8>) (mul_ln23_2_fu_315_p00.read());
}

void gradient::thread_mul_ln23_2_fu_315_p00() {
    mul_ln23_2_fu_315_p00 = esl_zext<32,8>(trunc_ln23_7_reg_371.read());
}

void gradient::thread_mul_ln23_2_fu_315_p1() {
    mul_ln23_2_fu_315_p1 =  (sc_lv<24>) (mul_ln23_2_fu_315_p10.read());
}

void gradient::thread_mul_ln23_2_fu_315_p10() {
    mul_ln23_2_fu_315_p10 = esl_zext<32,24>(and_ln23_1_fu_246_p3.read());
}

void gradient::thread_mul_ln23_3_fu_214_p0() {
    mul_ln23_3_fu_214_p0 =  (sc_lv<8>) (mul_ln23_3_fu_214_p00.read());
}

void gradient::thread_mul_ln23_3_fu_214_p00() {
    mul_ln23_3_fu_214_p00 = esl_zext<32,8>(lshr_ln23_2_reg_381.read());
}

void gradient::thread_mul_ln23_3_fu_214_p2() {
    mul_ln23_3_fu_214_p2 = (!mul_ln23_3_fu_214_p0.read().is_01() || !and_ln23_2_fu_204_p3.read().is_01())? sc_lv<32>(): sc_biguint<8>(mul_ln23_3_fu_214_p0.read()) * sc_bigint<32>(and_ln23_2_fu_204_p3.read());
}

void gradient::thread_mul_ln23_fu_226_p0() {
    mul_ln23_fu_226_p0 =  (sc_lv<8>) (mul_ln23_fu_226_p00.read());
}

void gradient::thread_mul_ln23_fu_226_p00() {
    mul_ln23_fu_226_p00 = esl_zext<16,8>(trunc_ln23_1_reg_351.read());
}

void gradient::thread_mul_ln23_fu_226_p1() {
    mul_ln23_fu_226_p1 =  (sc_lv<8>) (mul_ln23_fu_226_p10.read());
}

void gradient::thread_mul_ln23_fu_226_p10() {
    mul_ln23_fu_226_p10 = esl_zext<16,8>(trunc_ln23_reg_346.read());
}

void gradient::thread_mul_ln23_fu_226_p2() {
    mul_ln23_fu_226_p2 = (!mul_ln23_fu_226_p0.read().is_01() || !mul_ln23_fu_226_p1.read().is_01())? sc_lv<16>(): sc_biguint<8>(mul_ln23_fu_226_p0.read()) * sc_biguint<8>(mul_ln23_fu_226_p1.read());
}

void gradient::thread_or_ln23_1_fu_302_p2() {
    or_ln23_1_fu_302_p2 = (tmp1_fu_294_p3.read() | tmp_fu_269_p3.read());
}

void gradient::thread_or_ln23_fu_280_p2() {
    or_ln23_fu_280_p2 = (trunc_ln23_2_fu_277_p1.read() | mul_ln23_1_fu_308_p2.read());
}

void gradient::thread_output_f_Addr_A() {
    output_f_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): output_f_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void gradient::thread_output_f_Addr_A_orig() {
    output_f_Addr_A_orig =  (sc_lv<32>) (zext_ln23_reg_331.read());
}

void gradient::thread_output_f_Clk_A() {
    output_f_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void gradient::thread_output_f_Din_A() {
    output_f_Din_A = or_ln23_1_reg_391.read();
}

void gradient::thread_output_f_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        output_f_EN_A = ap_const_logic_1;
    } else {
        output_f_EN_A = ap_const_logic_0;
    }
}

void gradient::thread_output_f_Rst_A() {
    output_f_Rst_A = ap_rst_n_inv.read();
}

void gradient::thread_output_f_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        output_f_WEN_A = ap_const_lv4_F;
    } else {
        output_f_WEN_A = ap_const_lv4_0;
    }
}

void gradient::thread_tmp1_fu_294_p3() {
    tmp1_fu_294_p3 = esl_concat<8,24>(tmp_2_fu_285_p4.read(), or_ln23_fu_280_p2.read());
}

void gradient::thread_tmp_1_fu_260_p4() {
    tmp_1_fu_260_p4 = mul_ln23_3_reg_386.read().range(31, 16);
}

void gradient::thread_tmp_2_fu_285_p4() {
    tmp_2_fu_285_p4 = mul_ln23_2_fu_315_p2.read().range(31, 24);
}

void gradient::thread_tmp_fu_269_p3() {
    tmp_fu_269_p3 = esl_concat<16,16>(tmp_1_fu_260_p4.read(), mul_ln23_fu_226_p2.read());
}

void gradient::thread_trunc_ln23_1_fu_140_p1() {
    trunc_ln23_1_fu_140_p1 = kernel_Dout_A.read().range(8-1, 0);
}

void gradient::thread_trunc_ln23_2_fu_277_p1() {
    trunc_ln23_2_fu_277_p1 = mul_ln23_2_fu_315_p2.read().range(24-1, 0);
}

void gradient::thread_trunc_ln23_fu_136_p1() {
    trunc_ln23_fu_136_p1 = input_f_Dout_A.read().range(8-1, 0);
}

void gradient::thread_zext_ln23_fu_130_p1() {
    zext_ln23_fu_130_p1 = esl_zext<64,13>(idx_0_reg_107.read());
}

void gradient::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_118_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void gradient::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_f_Addr_A\" :  \"" << input_f_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_f_EN_A\" :  \"" << input_f_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_f_WEN_A\" :  \"" << input_f_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_f_Din_A\" :  \"" << input_f_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_f_Dout_A\" :  \"" << input_f_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_f_Clk_A\" :  \"" << input_f_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_f_Rst_A\" :  \"" << input_f_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Addr_A\" :  \"" << kernel_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_EN_A\" :  \"" << kernel_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_WEN_A\" :  \"" << kernel_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Din_A\" :  \"" << kernel_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_Dout_A\" :  \"" << kernel_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Clk_A\" :  \"" << kernel_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_Rst_A\" :  \"" << kernel_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_Addr_A\" :  \"" << output_f_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_EN_A\" :  \"" << output_f_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_WEN_A\" :  \"" << output_f_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_Din_A\" :  \"" << output_f_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_f_Dout_A\" :  \"" << output_f_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_Clk_A\" :  \"" << output_f_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_f_Rst_A\" :  \"" << output_f_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

