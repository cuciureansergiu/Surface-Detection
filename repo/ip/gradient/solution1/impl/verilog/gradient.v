// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="gradient,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=20481,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=223,HLS_SYN_LUT=307,HLS_VERSION=2019_1}" *)

module gradient (
        ap_clk,
        ap_rst_n,
        input_f_Addr_A,
        input_f_EN_A,
        input_f_WEN_A,
        input_f_Din_A,
        input_f_Dout_A,
        input_f_Clk_A,
        input_f_Rst_A,
        kernel_Addr_A,
        kernel_EN_A,
        kernel_WEN_A,
        kernel_Din_A,
        kernel_Dout_A,
        kernel_Clk_A,
        kernel_Rst_A,
        output_f_Addr_A,
        output_f_EN_A,
        output_f_WEN_A,
        output_f_Din_A,
        output_f_Dout_A,
        output_f_Clk_A,
        output_f_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] input_f_Addr_A;
output   input_f_EN_A;
output  [3:0] input_f_WEN_A;
output  [31:0] input_f_Din_A;
input  [31:0] input_f_Dout_A;
output   input_f_Clk_A;
output   input_f_Rst_A;
output  [31:0] kernel_Addr_A;
output   kernel_EN_A;
output  [3:0] kernel_WEN_A;
output  [31:0] kernel_Din_A;
input  [31:0] kernel_Dout_A;
output   kernel_Clk_A;
output   kernel_Rst_A;
output  [31:0] output_f_Addr_A;
output   output_f_EN_A;
output  [3:0] output_f_WEN_A;
output  [31:0] output_f_Din_A;
input  [31:0] output_f_Dout_A;
output   output_f_Clk_A;
output   output_f_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg input_f_EN_A;
reg kernel_EN_A;
reg output_f_EN_A;
reg[3:0] output_f_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] status;
wire   [12:0] idx_fu_124_p2;
reg   [12:0] idx_reg_326;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln23_fu_130_p1;
reg   [63:0] zext_ln23_reg_331;
wire   [0:0] icmp_ln20_fu_118_p2;
wire   [7:0] trunc_ln23_fu_136_p1;
reg   [7:0] trunc_ln23_reg_346;
wire    ap_CS_fsm_state3;
wire   [7:0] trunc_ln23_1_fu_140_p1;
reg   [7:0] trunc_ln23_1_reg_351;
reg   [7:0] tmp_3_reg_356;
reg   [7:0] trunc_ln23_6_reg_361;
reg   [7:0] tmp_4_reg_366;
reg   [7:0] trunc_ln23_7_reg_371;
reg   [7:0] tmp_5_reg_376;
reg   [7:0] lshr_ln23_2_reg_381;
wire   [31:0] mul_ln23_3_fu_214_p2;
reg   [31:0] mul_ln23_3_reg_386;
wire    ap_CS_fsm_state4;
wire   [31:0] or_ln23_1_fu_302_p2;
reg   [31:0] or_ln23_1_reg_391;
wire    ap_CS_fsm_state5;
reg   [12:0] idx_0_reg_107;
wire    ap_CS_fsm_state6;
wire   [31:0] input_f_Addr_A_orig;
wire   [31:0] kernel_Addr_A_orig;
wire   [31:0] output_f_Addr_A_orig;
wire   [7:0] mul_ln23_3_fu_214_p0;
wire  signed [31:0] and_ln23_2_fu_204_p3;
wire   [7:0] mul_ln23_fu_226_p0;
wire   [7:0] mul_ln23_fu_226_p1;
wire   [15:0] and_ln_fu_232_p3;
wire   [23:0] and_ln23_1_fu_246_p3;
wire   [15:0] tmp_1_fu_260_p4;
wire   [15:0] mul_ln23_fu_226_p2;
wire   [31:0] mul_ln23_2_fu_315_p2;
wire   [23:0] trunc_ln23_2_fu_277_p1;
wire   [23:0] mul_ln23_1_fu_308_p2;
wire   [7:0] tmp_2_fu_285_p4;
wire   [23:0] or_ln23_fu_280_p2;
wire   [31:0] tmp1_fu_294_p3;
wire   [31:0] tmp_fu_269_p3;
wire   [7:0] mul_ln23_1_fu_308_p0;
wire   [15:0] mul_ln23_1_fu_308_p1;
wire   [7:0] mul_ln23_2_fu_315_p0;
wire   [23:0] mul_ln23_2_fu_315_p1;
reg   [5:0] ap_NS_fsm;
wire   [23:0] mul_ln23_1_fu_308_p00;
wire   [23:0] mul_ln23_1_fu_308_p10;
wire   [31:0] mul_ln23_2_fu_315_p00;
wire   [31:0] mul_ln23_2_fu_315_p10;
wire   [31:0] mul_ln23_3_fu_214_p00;
wire   [15:0] mul_ln23_fu_226_p00;
wire   [15:0] mul_ln23_fu_226_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

gradient_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
gradient_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .status(status)
);

gradient_mul_mul_8ns_16ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
gradient_mul_mul_8ns_16ns_24_1_1_U1(
    .din0(mul_ln23_1_fu_308_p0),
    .din1(mul_ln23_1_fu_308_p1),
    .dout(mul_ln23_1_fu_308_p2)
);

gradient_mul_mul_8ns_24ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 32 ))
gradient_mul_mul_8ns_24ns_32_1_1_U2(
    .din0(mul_ln23_2_fu_315_p0),
    .din1(mul_ln23_2_fu_315_p1),
    .dout(mul_ln23_2_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        idx_0_reg_107 <= idx_reg_326;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        idx_0_reg_107 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        idx_reg_326 <= idx_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        lshr_ln23_2_reg_381 <= {{kernel_Dout_A[31:24]}};
        tmp_3_reg_356 <= {{input_f_Dout_A[15:8]}};
        tmp_4_reg_366 <= {{input_f_Dout_A[23:16]}};
        tmp_5_reg_376 <= {{input_f_Dout_A[31:24]}};
        trunc_ln23_1_reg_351 <= trunc_ln23_1_fu_140_p1;
        trunc_ln23_6_reg_361 <= {{kernel_Dout_A[15:8]}};
        trunc_ln23_7_reg_371 <= {{kernel_Dout_A[23:16]}};
        trunc_ln23_reg_346 <= trunc_ln23_fu_136_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        mul_ln23_3_reg_386[31 : 24] <= mul_ln23_3_fu_214_p2[31 : 24];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        or_ln23_1_reg_391 <= or_ln23_1_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_118_p2 == 1'd0))) begin
        zext_ln23_reg_331[12 : 0] <= zext_ln23_fu_130_p1[12 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_118_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_118_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_f_EN_A = 1'b1;
    end else begin
        input_f_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        kernel_EN_A = 1'b1;
    end else begin
        kernel_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_f_EN_A = 1'b1;
    end else begin
        output_f_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        output_f_WEN_A = 4'd15;
    end else begin
        output_f_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln20_fu_118_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln23_1_fu_246_p3 = {{tmp_4_reg_366}, {16'd0}};

assign and_ln23_2_fu_204_p3 = {{tmp_5_reg_376}, {24'd0}};

assign and_ln_fu_232_p3 = {{tmp_3_reg_356}, {8'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln20_fu_118_p2 = ((idx_0_reg_107 == 13'd4096) ? 1'b1 : 1'b0);

assign idx_fu_124_p2 = (idx_0_reg_107 + 13'd1);

assign input_f_Addr_A = input_f_Addr_A_orig << 32'd2;

assign input_f_Addr_A_orig = zext_ln23_fu_130_p1;

assign input_f_Clk_A = ap_clk;

assign input_f_Din_A = 32'd0;

assign input_f_Rst_A = ap_rst_n_inv;

assign input_f_WEN_A = 4'd0;

assign kernel_Addr_A = kernel_Addr_A_orig << 32'd2;

assign kernel_Addr_A_orig = zext_ln23_fu_130_p1;

assign kernel_Clk_A = ap_clk;

assign kernel_Din_A = 32'd0;

assign kernel_Rst_A = ap_rst_n_inv;

assign kernel_WEN_A = 4'd0;

assign mul_ln23_1_fu_308_p0 = mul_ln23_1_fu_308_p00;

assign mul_ln23_1_fu_308_p00 = trunc_ln23_6_reg_361;

assign mul_ln23_1_fu_308_p1 = mul_ln23_1_fu_308_p10;

assign mul_ln23_1_fu_308_p10 = and_ln_fu_232_p3;

assign mul_ln23_2_fu_315_p0 = mul_ln23_2_fu_315_p00;

assign mul_ln23_2_fu_315_p00 = trunc_ln23_7_reg_371;

assign mul_ln23_2_fu_315_p1 = mul_ln23_2_fu_315_p10;

assign mul_ln23_2_fu_315_p10 = and_ln23_1_fu_246_p3;

assign mul_ln23_3_fu_214_p0 = mul_ln23_3_fu_214_p00;

assign mul_ln23_3_fu_214_p00 = lshr_ln23_2_reg_381;

assign mul_ln23_3_fu_214_p2 = ($signed({{1'b0}, {mul_ln23_3_fu_214_p0}}) * $signed(and_ln23_2_fu_204_p3));

assign mul_ln23_fu_226_p0 = mul_ln23_fu_226_p00;

assign mul_ln23_fu_226_p00 = trunc_ln23_1_reg_351;

assign mul_ln23_fu_226_p1 = mul_ln23_fu_226_p10;

assign mul_ln23_fu_226_p10 = trunc_ln23_reg_346;

assign mul_ln23_fu_226_p2 = (mul_ln23_fu_226_p0 * mul_ln23_fu_226_p1);

assign or_ln23_1_fu_302_p2 = (tmp_fu_269_p3 | tmp1_fu_294_p3);

assign or_ln23_fu_280_p2 = (trunc_ln23_2_fu_277_p1 | mul_ln23_1_fu_308_p2);

assign output_f_Addr_A = output_f_Addr_A_orig << 32'd2;

assign output_f_Addr_A_orig = zext_ln23_reg_331;

assign output_f_Clk_A = ap_clk;

assign output_f_Din_A = or_ln23_1_reg_391;

assign output_f_Rst_A = ap_rst_n_inv;

assign tmp1_fu_294_p3 = {{tmp_2_fu_285_p4}, {or_ln23_fu_280_p2}};

assign tmp_1_fu_260_p4 = {{mul_ln23_3_reg_386[31:16]}};

assign tmp_2_fu_285_p4 = {{mul_ln23_2_fu_315_p2[31:24]}};

assign tmp_fu_269_p3 = {{tmp_1_fu_260_p4}, {mul_ln23_fu_226_p2}};

assign trunc_ln23_1_fu_140_p1 = kernel_Dout_A[7:0];

assign trunc_ln23_2_fu_277_p1 = mul_ln23_2_fu_315_p2[23:0];

assign trunc_ln23_fu_136_p1 = input_f_Dout_A[7:0];

assign zext_ln23_fu_130_p1 = idx_0_reg_107;

always @ (posedge ap_clk) begin
    zext_ln23_reg_331[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
    mul_ln23_3_reg_386[23:0] <= 24'b000000000000000000000000;
end

endmodule //gradient
