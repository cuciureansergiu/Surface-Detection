// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _gradient_HH_
#define _gradient_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "gradient_mul_mul_8ns_16ns_24_1_1.h"
#include "gradient_mul_mul_8ns_24ns_32_1_1.h"
#include "gradient_CRTL_BUS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CRTL_BUS_DATA_WIDTH = 32>
struct gradient : public sc_module {
    // Port declarations 41
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<32> > input_f_Addr_A;
    sc_out< sc_logic > input_f_EN_A;
    sc_out< sc_lv<4> > input_f_WEN_A;
    sc_out< sc_lv<32> > input_f_Din_A;
    sc_in< sc_lv<32> > input_f_Dout_A;
    sc_out< sc_logic > input_f_Clk_A;
    sc_out< sc_logic > input_f_Rst_A;
    sc_out< sc_lv<32> > kernel_Addr_A;
    sc_out< sc_logic > kernel_EN_A;
    sc_out< sc_lv<4> > kernel_WEN_A;
    sc_out< sc_lv<32> > kernel_Din_A;
    sc_in< sc_lv<32> > kernel_Dout_A;
    sc_out< sc_logic > kernel_Clk_A;
    sc_out< sc_logic > kernel_Rst_A;
    sc_out< sc_lv<32> > output_f_Addr_A;
    sc_out< sc_logic > output_f_EN_A;
    sc_out< sc_lv<4> > output_f_WEN_A;
    sc_out< sc_lv<32> > output_f_Din_A;
    sc_in< sc_lv<32> > output_f_Dout_A;
    sc_out< sc_logic > output_f_Clk_A;
    sc_out< sc_logic > output_f_Rst_A;
    sc_in< sc_logic > s_axi_CRTL_BUS_AWVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_AWREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_AWADDR;
    sc_in< sc_logic > s_axi_CRTL_BUS_WVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_WREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_WDATA;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH/8> > s_axi_CRTL_BUS_WSTRB;
    sc_in< sc_logic > s_axi_CRTL_BUS_ARVALID;
    sc_out< sc_logic > s_axi_CRTL_BUS_ARREADY;
    sc_in< sc_uint<C_S_AXI_CRTL_BUS_ADDR_WIDTH> > s_axi_CRTL_BUS_ARADDR;
    sc_out< sc_logic > s_axi_CRTL_BUS_RVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_RREADY;
    sc_out< sc_uint<C_S_AXI_CRTL_BUS_DATA_WIDTH> > s_axi_CRTL_BUS_RDATA;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_RRESP;
    sc_out< sc_logic > s_axi_CRTL_BUS_BVALID;
    sc_in< sc_logic > s_axi_CRTL_BUS_BREADY;
    sc_out< sc_lv<2> > s_axi_CRTL_BUS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    gradient(sc_module_name name);
    SC_HAS_PROCESS(gradient);

    ~gradient();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    gradient_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>* gradient_CRTL_BUS_s_axi_U;
    gradient_mul_mul_8ns_16ns_24_1_1<1,1,8,16,24>* gradient_mul_mul_8ns_16ns_24_1_1_U1;
    gradient_mul_mul_8ns_24ns_32_1_1<1,1,8,24,32>* gradient_mul_mul_8ns_24ns_32_1_1_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > status;
    sc_signal< sc_lv<13> > idx_fu_124_p2;
    sc_signal< sc_lv<13> > idx_reg_326;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > zext_ln23_fu_130_p1;
    sc_signal< sc_lv<64> > zext_ln23_reg_331;
    sc_signal< sc_lv<1> > icmp_ln20_fu_118_p2;
    sc_signal< sc_lv<8> > trunc_ln23_fu_136_p1;
    sc_signal< sc_lv<8> > trunc_ln23_reg_346;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > trunc_ln23_1_fu_140_p1;
    sc_signal< sc_lv<8> > trunc_ln23_1_reg_351;
    sc_signal< sc_lv<8> > tmp_3_reg_356;
    sc_signal< sc_lv<8> > trunc_ln23_6_reg_361;
    sc_signal< sc_lv<8> > tmp_4_reg_366;
    sc_signal< sc_lv<8> > trunc_ln23_7_reg_371;
    sc_signal< sc_lv<8> > tmp_5_reg_376;
    sc_signal< sc_lv<8> > lshr_ln23_2_reg_381;
    sc_signal< sc_lv<32> > mul_ln23_3_fu_214_p2;
    sc_signal< sc_lv<32> > mul_ln23_3_reg_386;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > or_ln23_1_fu_302_p2;
    sc_signal< sc_lv<32> > or_ln23_1_reg_391;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<13> > idx_0_reg_107;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > input_f_Addr_A_orig;
    sc_signal< sc_lv<32> > kernel_Addr_A_orig;
    sc_signal< sc_lv<32> > output_f_Addr_A_orig;
    sc_signal< sc_lv<8> > mul_ln23_3_fu_214_p0;
    sc_signal< sc_lv<32> > and_ln23_2_fu_204_p3;
    sc_signal< sc_lv<8> > mul_ln23_fu_226_p0;
    sc_signal< sc_lv<8> > mul_ln23_fu_226_p1;
    sc_signal< sc_lv<16> > and_ln_fu_232_p3;
    sc_signal< sc_lv<24> > and_ln23_1_fu_246_p3;
    sc_signal< sc_lv<16> > tmp_1_fu_260_p4;
    sc_signal< sc_lv<16> > mul_ln23_fu_226_p2;
    sc_signal< sc_lv<32> > mul_ln23_2_fu_315_p2;
    sc_signal< sc_lv<24> > trunc_ln23_2_fu_277_p1;
    sc_signal< sc_lv<24> > mul_ln23_1_fu_308_p2;
    sc_signal< sc_lv<8> > tmp_2_fu_285_p4;
    sc_signal< sc_lv<24> > or_ln23_fu_280_p2;
    sc_signal< sc_lv<32> > tmp1_fu_294_p3;
    sc_signal< sc_lv<32> > tmp_fu_269_p3;
    sc_signal< sc_lv<8> > mul_ln23_1_fu_308_p0;
    sc_signal< sc_lv<16> > mul_ln23_1_fu_308_p1;
    sc_signal< sc_lv<8> > mul_ln23_2_fu_315_p0;
    sc_signal< sc_lv<24> > mul_ln23_2_fu_315_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_lv<24> > mul_ln23_1_fu_308_p00;
    sc_signal< sc_lv<24> > mul_ln23_1_fu_308_p10;
    sc_signal< sc_lv<32> > mul_ln23_2_fu_315_p00;
    sc_signal< sc_lv<32> > mul_ln23_2_fu_315_p10;
    sc_signal< sc_lv<32> > mul_ln23_3_fu_214_p00;
    sc_signal< sc_lv<16> > mul_ln23_fu_226_p00;
    sc_signal< sc_lv<16> > mul_ln23_fu_226_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<13> ap_const_lv13_1000;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_and_ln23_1_fu_246_p3();
    void thread_and_ln23_2_fu_204_p3();
    void thread_and_ln_fu_232_p3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_icmp_ln20_fu_118_p2();
    void thread_idx_fu_124_p2();
    void thread_input_f_Addr_A();
    void thread_input_f_Addr_A_orig();
    void thread_input_f_Clk_A();
    void thread_input_f_Din_A();
    void thread_input_f_EN_A();
    void thread_input_f_Rst_A();
    void thread_input_f_WEN_A();
    void thread_kernel_Addr_A();
    void thread_kernel_Addr_A_orig();
    void thread_kernel_Clk_A();
    void thread_kernel_Din_A();
    void thread_kernel_EN_A();
    void thread_kernel_Rst_A();
    void thread_kernel_WEN_A();
    void thread_mul_ln23_1_fu_308_p0();
    void thread_mul_ln23_1_fu_308_p00();
    void thread_mul_ln23_1_fu_308_p1();
    void thread_mul_ln23_1_fu_308_p10();
    void thread_mul_ln23_2_fu_315_p0();
    void thread_mul_ln23_2_fu_315_p00();
    void thread_mul_ln23_2_fu_315_p1();
    void thread_mul_ln23_2_fu_315_p10();
    void thread_mul_ln23_3_fu_214_p0();
    void thread_mul_ln23_3_fu_214_p00();
    void thread_mul_ln23_3_fu_214_p2();
    void thread_mul_ln23_fu_226_p0();
    void thread_mul_ln23_fu_226_p00();
    void thread_mul_ln23_fu_226_p1();
    void thread_mul_ln23_fu_226_p10();
    void thread_mul_ln23_fu_226_p2();
    void thread_or_ln23_1_fu_302_p2();
    void thread_or_ln23_fu_280_p2();
    void thread_output_f_Addr_A();
    void thread_output_f_Addr_A_orig();
    void thread_output_f_Clk_A();
    void thread_output_f_Din_A();
    void thread_output_f_EN_A();
    void thread_output_f_Rst_A();
    void thread_output_f_WEN_A();
    void thread_tmp1_fu_294_p3();
    void thread_tmp_1_fu_260_p4();
    void thread_tmp_2_fu_285_p4();
    void thread_tmp_fu_269_p3();
    void thread_trunc_ln23_1_fu_140_p1();
    void thread_trunc_ln23_2_fu_277_p1();
    void thread_trunc_ln23_fu_136_p1();
    void thread_zext_ln23_fu_130_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
